/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CLASS = 5;
  /** RegularExpression Id. */
  int PUBLIC = 6;
  /** RegularExpression Id. */
  int STATIC = 7;
  /** RegularExpression Id. */
  int VOID = 8;
  /** RegularExpression Id. */
  int STRING = 9;
  /** RegularExpression Id. */
  int INT = 10;
  /** RegularExpression Id. */
  int LONG = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int IF = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int WHILE = 15;
  /** RegularExpression Id. */
  int PRINT = 16;
  /** RegularExpression Id. */
  int LENGTH = 17;
  /** RegularExpression Id. */
  int TRUE = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int THIS = 20;
  /** RegularExpression Id. */
  int NEW = 21;
  /** RegularExpression Id. */
  int MAIN = 22;
  /** RegularExpression Id. */
  int RETURN = 23;
  /** RegularExpression Id. */
  int INT_LIT = 24;
  /** RegularExpression Id. */
  int LONG_LIT = 25;
  /** RegularExpression Id. */
  int LPAREN = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int LBRACE = 28;
  /** RegularExpression Id. */
  int RBRACE = 29;
  /** RegularExpression Id. */
  int LBRACKET = 30;
  /** RegularExpression Id. */
  int RBRACKET = 31;
  /** RegularExpression Id. */
  int SEMICOLON = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int BANG = 35;
  /** RegularExpression Id. */
  int IDENTIFIER = 36;
  /** RegularExpression Id. */
  int LETTER = 37;
  /** RegularExpression Id. */
  int DIGIT = 38;
  /** RegularExpression Id. */
  int ASSIGN = 39;
  /** RegularExpression Id. */
  int AND = 40;
  /** RegularExpression Id. */
  int OR = 41;
  /** RegularExpression Id. */
  int LT = 42;
  /** RegularExpression Id. */
  int ADD = 43;
  /** RegularExpression Id. */
  int SUB = 44;
  /** RegularExpression Id. */
  int MUL = 45;
  /** RegularExpression Id. */
  int LEQ = 46;
  /** RegularExpression Id. */
  int GT = 47;
  /** RegularExpression Id. */
  int GEQ = 48;
  /** RegularExpression Id. */
  int EQ = 49;
  /** RegularExpression Id. */
  int NEQ = 50;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 55;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"class\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"String\"",
    "\"int\"",
    "\"long\"",
    "\"boolean\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"System.out.println\"",
    "\"length\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"main\"",
    "\"return\"",
    "<INT_LIT>",
    "<LONG_LIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"!\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"=\"",
    "\"&&\"",
    "\"||\"",
    "\"<\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"/*\"",
    "<token of kind 52>",
    "\"*/\"",
    "\"//\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 56>",
  };

}
